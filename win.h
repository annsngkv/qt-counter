#ifndef win_h
#define win_h
#include <QtGui>
#include <QLineEdit>
#include <QLabel>
#include <QPushButton>

/*
 * Класс счетчик, наследуемый от QLineEdit
*/
class Counter:public QLineEdit
{
    /*
     * Обязательный макрос, так как класс Counter определяет новые сигналы и слоты
    */
    Q_OBJECT // макрос Qt, обеспечивающий корректное создание сигналов и слотов

    public:
        /*
         * Конструктор класса Counter
        */
        Counter(const QString & contents, QWidget *parent=0):
        QLineEdit(contents, parent){} // вызов конструктора родительского класса - QLineEdit

    signals:
        /*
         * Объявляем новый сигнал, который будет генерироваться по достижении пяти нажатий
        */
        void tick_signal();

    public slots:
        /*
         * метод увеличивающий содержимое на единицу
        */
        void add_one() {
            /*
             * Считываем содержимое счетчика
            */
            QString str = text();

            /*
             * Функция, возвращающая строку, преобразованную в значение типа int
            */
            int r = str.toInt();

            /*
             * Если число нажатий не равно 0 и равно 0 по модулю 5, то генерируем сигнал
            */
            if (r != 0 && r % 5 == 0) emit tick_signal();

            /*
             * Увеличиваем содержимое счетчика
            */
            r++;

            /*
             * Функция, устанавливающая строку в печатное представление числа
            */
            str.setNum(r);


            /*
             * Вставляем полученное значение в счетчик
            */
            setText(str);
        }
};

/*
 * Наследуемся от класса QWidget – базовый класс всех виджетов
*/
class Win: public QWidget
{

    Q_OBJECT // макрос Qt, обеспечивающий корректное создание сигналов и слотов

    protected:

        /*
         * Объявляем указатель на объект класса QTextCodec - один из семейства классов, определенных
         * для работы с разными, в том числе национальными кодировками в Qt
        */
        QTextCodec *codec; // перекодировщик

        /*
         * Объявляем указатели на объекты класса QLabel - метка – виджет
        */
        QLabel *label1, *label2;

        /*
         * Объявляем указатели на счетчики
        */
        Counter *edit1, *edit2;

        /*
         * Объявляем указатели на объекты класса QPushButton - виджет-кнопка
        */
        QPushButton *calcbutton; // кнопка "+1"
        QPushButton *exitbutton; // кнопка "Выход"

    public:
        /*
         * Конструктор базового класса QWidget с двумя параметрами
         * 1-й параметр - родитель, так как он установлен в 0, то у нашего класса нет родителей
         *
         * 2-й параметр - флаги – битовая комбинация, отвечающая за тип окна: обычное,
         * диалоговое, контекстное меню, панель инструментов, выпадающая подсказка и т.п.
         * Так как здесь этот параметр опущен, то он берется по умолчанию – обычное окно.
        */
        Win(QWidget *parent = 0);
};
#endif
